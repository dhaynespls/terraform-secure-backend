// Code generated by counterfeiter. DO NOT EDIT.
package serverfakes

import (
	"sync"

	"code.cloudfoundry.org/credhub-cli/credhub/credentials"
	"code.cloudfoundry.org/credhub-cli/credhub/credentials/values"
	"github.com/orange-cloudfoundry/terraform-secure-backend/server"
)

type FakeCredhubClient struct {
	GetLatestJSONStub        func(name string) (credentials.JSON, error)
	getLatestJSONMutex       sync.RWMutex
	getLatestJSONArgsForCall []struct {
		name string
	}
	getLatestJSONReturns struct {
		result1 credentials.JSON
		result2 error
	}
	getLatestJSONReturnsOnCall map[int]struct {
		result1 credentials.JSON
		result2 error
	}
	DeleteStub        func(name string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		name string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	SetJSONStub        func(name string, value values.JSON) (credentials.JSON, error)
	setJSONMutex       sync.RWMutex
	setJSONArgsForCall []struct {
		name  string
		value values.JSON
	}
	setJSONReturns struct {
		result1 credentials.JSON
		result2 error
	}
	setJSONReturnsOnCall map[int]struct {
		result1 credentials.JSON
		result2 error
	}
	FindByPathStub        func(path string) (credentials.FindResults, error)
	findByPathMutex       sync.RWMutex
	findByPathArgsForCall []struct {
		path string
	}
	findByPathReturns struct {
		result1 credentials.FindResults
		result2 error
	}
	findByPathReturnsOnCall map[int]struct {
		result1 credentials.FindResults
		result2 error
	}
	SetValueStub        func(name string, value values.Value) (credentials.Value, error)
	setValueMutex       sync.RWMutex
	setValueArgsForCall []struct {
		name  string
		value values.Value
	}
	setValueReturns struct {
		result1 credentials.Value
		result2 error
	}
	setValueReturnsOnCall map[int]struct {
		result1 credentials.Value
		result2 error
	}
	GetLatestValueStub        func(name string) (credentials.Value, error)
	getLatestValueMutex       sync.RWMutex
	getLatestValueArgsForCall []struct {
		name string
	}
	getLatestValueReturns struct {
		result1 credentials.Value
		result2 error
	}
	getLatestValueReturnsOnCall map[int]struct {
		result1 credentials.Value
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCredhubClient) GetLatestJSON(name string) (credentials.JSON, error) {
	fake.getLatestJSONMutex.Lock()
	ret, specificReturn := fake.getLatestJSONReturnsOnCall[len(fake.getLatestJSONArgsForCall)]
	fake.getLatestJSONArgsForCall = append(fake.getLatestJSONArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("GetLatestJSON", []interface{}{name})
	fake.getLatestJSONMutex.Unlock()
	if fake.GetLatestJSONStub != nil {
		return fake.GetLatestJSONStub(name)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getLatestJSONReturns.result1, fake.getLatestJSONReturns.result2
}

func (fake *FakeCredhubClient) GetLatestJSONCallCount() int {
	fake.getLatestJSONMutex.RLock()
	defer fake.getLatestJSONMutex.RUnlock()
	return len(fake.getLatestJSONArgsForCall)
}

func (fake *FakeCredhubClient) GetLatestJSONArgsForCall(i int) string {
	fake.getLatestJSONMutex.RLock()
	defer fake.getLatestJSONMutex.RUnlock()
	return fake.getLatestJSONArgsForCall[i].name
}

func (fake *FakeCredhubClient) GetLatestJSONReturns(result1 credentials.JSON, result2 error) {
	fake.GetLatestJSONStub = nil
	fake.getLatestJSONReturns = struct {
		result1 credentials.JSON
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) GetLatestJSONReturnsOnCall(i int, result1 credentials.JSON, result2 error) {
	fake.GetLatestJSONStub = nil
	if fake.getLatestJSONReturnsOnCall == nil {
		fake.getLatestJSONReturnsOnCall = make(map[int]struct {
			result1 credentials.JSON
			result2 error
		})
	}
	fake.getLatestJSONReturnsOnCall[i] = struct {
		result1 credentials.JSON
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) Delete(name string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("Delete", []interface{}{name})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(name)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteReturns.result1
}

func (fake *FakeCredhubClient) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeCredhubClient) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].name
}

func (fake *FakeCredhubClient) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredhubClient) DeleteReturnsOnCall(i int, result1 error) {
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredhubClient) SetJSON(name string, value values.JSON) (credentials.JSON, error) {
	fake.setJSONMutex.Lock()
	ret, specificReturn := fake.setJSONReturnsOnCall[len(fake.setJSONArgsForCall)]
	fake.setJSONArgsForCall = append(fake.setJSONArgsForCall, struct {
		name  string
		value values.JSON
	}{name, value})
	fake.recordInvocation("SetJSON", []interface{}{name, value})
	fake.setJSONMutex.Unlock()
	if fake.SetJSONStub != nil {
		return fake.SetJSONStub(name, value)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.setJSONReturns.result1, fake.setJSONReturns.result2
}

func (fake *FakeCredhubClient) SetJSONCallCount() int {
	fake.setJSONMutex.RLock()
	defer fake.setJSONMutex.RUnlock()
	return len(fake.setJSONArgsForCall)
}

func (fake *FakeCredhubClient) SetJSONArgsForCall(i int) (string, values.JSON) {
	fake.setJSONMutex.RLock()
	defer fake.setJSONMutex.RUnlock()
	return fake.setJSONArgsForCall[i].name, fake.setJSONArgsForCall[i].value
}

func (fake *FakeCredhubClient) SetJSONReturns(result1 credentials.JSON, result2 error) {
	fake.SetJSONStub = nil
	fake.setJSONReturns = struct {
		result1 credentials.JSON
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) SetJSONReturnsOnCall(i int, result1 credentials.JSON, result2 error) {
	fake.SetJSONStub = nil
	if fake.setJSONReturnsOnCall == nil {
		fake.setJSONReturnsOnCall = make(map[int]struct {
			result1 credentials.JSON
			result2 error
		})
	}
	fake.setJSONReturnsOnCall[i] = struct {
		result1 credentials.JSON
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) FindByPath(path string) (credentials.FindResults, error) {
	fake.findByPathMutex.Lock()
	ret, specificReturn := fake.findByPathReturnsOnCall[len(fake.findByPathArgsForCall)]
	fake.findByPathArgsForCall = append(fake.findByPathArgsForCall, struct {
		path string
	}{path})
	fake.recordInvocation("FindByPath", []interface{}{path})
	fake.findByPathMutex.Unlock()
	if fake.FindByPathStub != nil {
		return fake.FindByPathStub(path)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.findByPathReturns.result1, fake.findByPathReturns.result2
}

func (fake *FakeCredhubClient) FindByPathCallCount() int {
	fake.findByPathMutex.RLock()
	defer fake.findByPathMutex.RUnlock()
	return len(fake.findByPathArgsForCall)
}

func (fake *FakeCredhubClient) FindByPathArgsForCall(i int) string {
	fake.findByPathMutex.RLock()
	defer fake.findByPathMutex.RUnlock()
	return fake.findByPathArgsForCall[i].path
}

func (fake *FakeCredhubClient) FindByPathReturns(result1 credentials.FindResults, result2 error) {
	fake.FindByPathStub = nil
	fake.findByPathReturns = struct {
		result1 credentials.FindResults
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) FindByPathReturnsOnCall(i int, result1 credentials.FindResults, result2 error) {
	fake.FindByPathStub = nil
	if fake.findByPathReturnsOnCall == nil {
		fake.findByPathReturnsOnCall = make(map[int]struct {
			result1 credentials.FindResults
			result2 error
		})
	}
	fake.findByPathReturnsOnCall[i] = struct {
		result1 credentials.FindResults
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) SetValue(name string, value values.Value) (credentials.Value, error) {
	fake.setValueMutex.Lock()
	ret, specificReturn := fake.setValueReturnsOnCall[len(fake.setValueArgsForCall)]
	fake.setValueArgsForCall = append(fake.setValueArgsForCall, struct {
		name  string
		value values.Value
	}{name, value})
	fake.recordInvocation("SetValue", []interface{}{name, value})
	fake.setValueMutex.Unlock()
	if fake.SetValueStub != nil {
		return fake.SetValueStub(name, value)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.setValueReturns.result1, fake.setValueReturns.result2
}

func (fake *FakeCredhubClient) SetValueCallCount() int {
	fake.setValueMutex.RLock()
	defer fake.setValueMutex.RUnlock()
	return len(fake.setValueArgsForCall)
}

func (fake *FakeCredhubClient) SetValueArgsForCall(i int) (string, values.Value) {
	fake.setValueMutex.RLock()
	defer fake.setValueMutex.RUnlock()
	return fake.setValueArgsForCall[i].name, fake.setValueArgsForCall[i].value
}

func (fake *FakeCredhubClient) SetValueReturns(result1 credentials.Value, result2 error) {
	fake.SetValueStub = nil
	fake.setValueReturns = struct {
		result1 credentials.Value
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) SetValueReturnsOnCall(i int, result1 credentials.Value, result2 error) {
	fake.SetValueStub = nil
	if fake.setValueReturnsOnCall == nil {
		fake.setValueReturnsOnCall = make(map[int]struct {
			result1 credentials.Value
			result2 error
		})
	}
	fake.setValueReturnsOnCall[i] = struct {
		result1 credentials.Value
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) GetLatestValue(name string) (credentials.Value, error) {
	fake.getLatestValueMutex.Lock()
	ret, specificReturn := fake.getLatestValueReturnsOnCall[len(fake.getLatestValueArgsForCall)]
	fake.getLatestValueArgsForCall = append(fake.getLatestValueArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("GetLatestValue", []interface{}{name})
	fake.getLatestValueMutex.Unlock()
	if fake.GetLatestValueStub != nil {
		return fake.GetLatestValueStub(name)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getLatestValueReturns.result1, fake.getLatestValueReturns.result2
}

func (fake *FakeCredhubClient) GetLatestValueCallCount() int {
	fake.getLatestValueMutex.RLock()
	defer fake.getLatestValueMutex.RUnlock()
	return len(fake.getLatestValueArgsForCall)
}

func (fake *FakeCredhubClient) GetLatestValueArgsForCall(i int) string {
	fake.getLatestValueMutex.RLock()
	defer fake.getLatestValueMutex.RUnlock()
	return fake.getLatestValueArgsForCall[i].name
}

func (fake *FakeCredhubClient) GetLatestValueReturns(result1 credentials.Value, result2 error) {
	fake.GetLatestValueStub = nil
	fake.getLatestValueReturns = struct {
		result1 credentials.Value
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) GetLatestValueReturnsOnCall(i int, result1 credentials.Value, result2 error) {
	fake.GetLatestValueStub = nil
	if fake.getLatestValueReturnsOnCall == nil {
		fake.getLatestValueReturnsOnCall = make(map[int]struct {
			result1 credentials.Value
			result2 error
		})
	}
	fake.getLatestValueReturnsOnCall[i] = struct {
		result1 credentials.Value
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getLatestJSONMutex.RLock()
	defer fake.getLatestJSONMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.setJSONMutex.RLock()
	defer fake.setJSONMutex.RUnlock()
	fake.findByPathMutex.RLock()
	defer fake.findByPathMutex.RUnlock()
	fake.setValueMutex.RLock()
	defer fake.setValueMutex.RUnlock()
	fake.getLatestValueMutex.RLock()
	defer fake.getLatestValueMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCredhubClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ server.CredhubClient = new(FakeCredhubClient)
